## Schema version 0.0.23
schema { 
  query: Query 
  mutation: Mutation   
}

type Bindings {
  metric: String
  scope: String
  category: String
  attribute: String
  source: String
}

type Compliance {
  passing: Int!
  failing: Int!
}

type Component {
  id: String!
  sbom_id: String!
  name: String!
  version: String!
  org: String!
  status: ComponentStatus!
  search_results: SearchResults!
  suggestions: [ComponentSuggestion!]!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
  error_message: String
}

enum ComponentStatus {
  no_resolution
  partial_resolution
  resolved
  errored
  deleted
}

type ComponentSuggestion {
  key: String!
  value: String!
}

input CreateOrganizationRequest {
  name: String!
}

input CreateSoftwareListRequest {
  name: String!
  org_id: String!
  version: String
  supplier_name: String
  contact_name: String
  contact_email: String
  ruleset_id: String
  monitor_frequency: String
}

type DateMetrics {
  name: String
  value: String
  bindings: [String]
}

type FloatMetrics {
  name: String
  value: Float
  bindings: [Bindings]
}

type IntMetrics {
  name: String
  value: Int
  bindings: [Bindings]
}

type ListMetrics {
  risk: Risk!
  compliance: Compliance!
  resolution: Resolution!
}

type Metrics {
  id: String
  source_count_metrics: [SourceCountMetrics]
  source_monthly_count_metrics: [SourceMonthlyCountMetrics]
  monthly_mttr_metrics: [MonthlyMttrMetrics]
  monthly_count_metrics: [MonthlyCountMetrics]
  date_metrics: [DateMetrics]
  float_metrics: [FloatMetrics]
  int_metrics: [IntMetrics]
}

type MonthlyCount {
  count: Float
  month: String
}

type MonthlyCountMetrics {
  name: String
  value: [MonthlyCount]
  bindings: [String]
}

type MonthlyMttr {
  mttr: Float
  month: String
}

type MonthlyMttrMetrics {
  name: String
  value: [MonthlyMttr]
  bindings: [MonthlyMttr]
}

type Mutation {
  """this is extended by other parts of the schema"""
  _placeholder: Int
  CreateOrganization(input: CreateOrganizationRequest!): Organization!
  UpdateOrganizationMembers(input: UpdateOrganizationMembersInput!): Boolean
  CreateSoftwareList(input: CreateSoftwareListRequest!): SoftwareList!
}

enum NotificationChannelOption {
  email
}

enum NotificationFrequencyOption {
  daily
}

type Organization {
  id: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
  name: String!
  members: [OrganizationMember!]!
}

type OrganizationMember {
  user_id: String!
  username: String!
  role_id: String!
  role: OrganizationRole!
  created_at: Time!
  deleted_at: Time
}

input OrganizationMemberUpdate {
  user_id: String!
  role_id: String
  deleted_at: Time
}

enum OrganizationRole {
  Owner
  Manager
  Member
}

type PackageSearchResult implements SearchResult {
  id: String!
  confidence: Float!
  is_user_input: Boolean!
  selected: Boolean!
  automatically_selected: Boolean!
  name: String!
  org: String!
  version: String!
  purl: String!
}

enum Permission {
  """
  Grants all permissions over all objects in the system.
  Reserved for System Admin role. Cannot be granted to or inherited by other roles.
  """
  ALL_PERMISSIONS

  """
  Grants the ability to modify an organization's settings, including billing information.
  """
  ORGANIZATION_MODIFY

  """
  Grants the ability to view basic information about an organization, including its name,
  the date and time it was created, etc.
  """
  ORGANIZATION_VIEW

  """Grants the ability to invite users to an organization."""
  ORGANIZATION_USER_CREATE

  """
  Grants the ability to change the roles of existing users within an organization.
  """
  ORGANIZATION_USER_MODIFY

  """Grants the ability to remove users from an organization."""
  ORGANIZATION_USER_REMOVE

  """Grants the ability to view a list of all the organization's members."""
  ORGANIZATION_USER_VIEW

  """
  Grants the ability to create a new software list and add it to an organization's software inventory.
  """
  ORGANIZATION_SOFTWARE_LIST_CREATE

  """
  Grants the ability to modify an organization's existing software lists,
  including adding, modifying, and removing components from individual software lists.
  """
  ORGANIZATION_SOFTWARE_LIST_MODIFY

  """
  Grants the ability to view an organization's software lists and any components they contain.
  This also includes the ability to export an SBOM for the software lists and view risk scoring data.
  """
  ORGANIZATION_SOFTWARE_LIST_VIEW

  """
  Grants the ability to remove software lists from an organization's software inventory.
  """
  ORGANIZATION_SOFTWARE_LIST_REMOVE
}

type Preferences {
  flip: Boolean!
  notification_channel: NotificationChannelOption!
  frequency: NotificationFrequencyOption!
}

type ProductSearchResult implements SearchResult {
  id: String!
  confidence: Float!
  is_user_input: Boolean!
  selected: Boolean!
  automatically_selected: Boolean!
  name: String!
  org: String!
  version: String!
  cpe: String!
}

type Query {
  """this is extended by other parts of the schema"""
  _placeholder: Int
  organizations(ids: [String!]): [Organization!]!
  metrics(id: String!): Metrics!
  scores(id: String!): Scores!
  software_lists(ids: [String!], org_id: String): [SoftwareList!]!
  self: User!
}

type RepoSearchResult implements SearchResult {
  id: String!
  confidence: Float!
  is_user_input: Boolean!
  selected: Boolean!
  automatically_selected: Boolean!
  name: String!
  org: String!
  version: String!
  repo_url: String!
}

type Resolution {
  resolved: Int!
  partially_resolved: Int!
  unresolved: Int!
}

type Risk {
  score: Int
  scopes: [RiskScope!]!
}

type RiskScope {
  name: String!
  value: Int
}

type Scope {
  name: String
  value: Float
}

type Scores {
  name: String
  value: Float
  scopes: [Scope]
}

interface SearchResult {
  id: String!
  confidence: Float!
  is_user_input: Boolean!
  selected: Boolean!
  automatically_selected: Boolean!
  name: String!
  org: String!
  version: String!
}

type SearchResults {
  package: [PackageSearchResult!]!
  repo: [RepoSearchResult!]!
  product: [ProductSearchResult!]!
}

enum SearchResultType {
  package
  product
  repo
}

type SoftwareInventory {
  id: String!
  organization: Metrics!
  softwareLists: [SoftwareList!]!
}

type SoftwareList {
  id: String!
  name: String!
  version: String!
  supplier: String!
  contact_name: String!
  contact_email: String!
  monitor_frequency: String!
  status: SoftwareListStatus!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
  entry_count: Int
  metrics: Metrics!
  entries: [Component!]!
  team_id: String!
  org_id: String!
  ruleset_id: String!
}

enum SoftwareListStatus {
  created
  autocompletedone
  allconfirmed
}

type SourceCount {
  count: Int
  source: String
}

type SourceCountMetrics {
  name: String
  value: [SourceCount]
  bindings: [Bindings]
}

type SourceMonthlyCount {
  count: [SourceCount]
  month: String
}

type SourceMonthlyCountMetrics {
  name: String
  value: [SourceMonthlyCount]
  bindings: [String]
}

"""
allows timestamps to be converted to/from the time.Time type in Go.
we don't need to define this one anywhere else because Time is built in to gqlgen
"""
scalar Time

input UpdateOrganizationMembersInput {
  org_id: String!
  members: [OrganizationMemberUpdate!]!
}

type User {
  id: String!
  email: String!
  username: String!
  created_at: Time!
  updated_at: Time!
  last_active_at: Time!
  status: UserStatus!
  externally_managed: Boolean!
  metadata: String
  sys_admin: Boolean!
  system: Boolean!
  organizations: [UserOrganizationRole!]!
  teams: [UserTeamRole!]!
}

type UserOrganizationRole {
  role_id: String!
  role: OrganizationRole!
  organization: Organization!
}

enum UserStatus {
  active
  disabled
}

type UserTeamRole {
  role: String!
  team_id: String!
}
